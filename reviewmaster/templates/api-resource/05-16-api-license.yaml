AWSTemplateFormatVersion: '2010-09-09'
Description: 'ReviewMaster API License Module - /api/license endpoint resources and methods'

# =====================================================================================================================
# PARAMETERS SECTION
# =====================================================================================================================

Parameters:
  # API Gateway References
  RestApiId:
    Type: String
    Description: "REST API ID from API Gateway module"
    
  RestApiRootResourceId:
    Type: String
    Description: "REST API Root Resource ID from API Gateway module"
    
  # Lambda Function Reference
  ConfigManagerLambdaArn:
    Type: String
    Description: "Config Manager Lambda Function ARN from Compute module"

# =====================================================================================================================
# RESOURCES SECTION
# =====================================================================================================================

Resources:

  # === ROOT LEVEL RESOURCE ===

  # /api リソース
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiId
      ParentId: !Ref RestApiRootResourceId
      PathPart: "api"

  # /api/license リソース
  LicenseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiId
      ParentId: !Ref ApiResource
      PathPart: "license"

  # === LICENSE ENDPOINT RESOURCES ===

  # /api/license/register リソース
  LicenseRegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiId
      ParentId: !Ref LicenseResource
      PathPart: "register"

  # /api/license/status リソース
  LicenseStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiId
      ParentId: !Ref LicenseResource
      PathPart: "status"

  # /api/license/refresh リソース
  LicenseRefreshResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiId
      ParentId: !Ref LicenseResource
      PathPart: "refresh"

  # /api/license/switch-to-free リソース
  LicenseSwitchToFreeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiId
      ParentId: !Ref LicenseResource
      PathPart: "switch-to-free"

  # === LICENSE ENDPOINT METHODS ===

  # POST /api/license/register
  LicenseRegisterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiId
      ResourceId: !Ref LicenseRegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfigManagerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 400
          ResponseModels:
            application/json: Empty

  # GET /api/license/status
  LicenseStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiId
      ResourceId: !Ref LicenseStatusResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfigManagerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # POST /api/license/refresh
  LicenseRefreshMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiId
      ResourceId: !Ref LicenseRefreshResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfigManagerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 400
          ResponseModels:
            application/json: Empty

  # POST /api/license/switch-to-free
  LicenseSwitchToFreeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiId
      ResourceId: !Ref LicenseSwitchToFreeResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfigManagerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 400
          ResponseModels:
            application/json: Empty

  # === CORS OPTIONS METHODS ===
  
  # OPTIONS /api/license/register (CORS)
  LicenseRegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiId
      ResourceId: !Ref LicenseRegisterResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS /api/license/status (CORS)
  LicenseStatusOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiId
      ResourceId: !Ref LicenseStatusResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS /api/license/refresh (CORS)
  LicenseRefreshOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiId
      ResourceId: !Ref LicenseRefreshResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS /api/license/switch-to-free (CORS)
  LicenseSwitchToFreeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApiId
      ResourceId: !Ref LicenseSwitchToFreeResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

# =====================================================================================================================
# OUTPUTS SECTION
# =====================================================================================================================

Outputs:
  ApiResourceId:
    Description: "/api Resource ID"
    Value: !Ref ApiResource
    Export:
      Name: !Sub "${AWS::StackName}-ApiResourceId"
      
  LicenseResourceId:
    Description: "/api/license Resource ID"
    Value: !Ref LicenseResource
    Export:
      Name: !Sub "${AWS::StackName}-LicenseResourceId"

  LicenseRegisterResourceId:
    Description: "/api/license/register Resource ID"
    Value: !Ref LicenseRegisterResource
    Export:
      Name: !Sub "${AWS::StackName}-LicenseRegisterResourceId"

  LicenseStatusResourceId:
    Description: "/api/license/status Resource ID"
    Value: !Ref LicenseStatusResource
    Export:
      Name: !Sub "${AWS::StackName}-LicenseStatusResourceId"

  LicenseRefreshResourceId:
    Description: "/api/license/refresh Resource ID"
    Value: !Ref LicenseRefreshResource
    Export:
      Name: !Sub "${AWS::StackName}-LicenseRefreshResourceId"

  LicenseSwitchToFreeResourceId:
    Description: "/api/license/switch-to-free Resource ID"
    Value: !Ref LicenseSwitchToFreeResource
    Export:
      Name: !Sub "${AWS::StackName}-LicenseSwitchToFreeResourceId"
